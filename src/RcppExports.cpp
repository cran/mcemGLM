// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// iMatrixDiagCpp_n
arma::mat iMatrixDiagCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::mat& uSample, const arma::vec& kKi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_iMatrixDiagCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSampleSEXP, SEXP kKiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uSample(uSampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(iMatrixDiagCpp_n(beta, sigma, uSample, kKi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// iMatrixDiagNegBinomCpp_n
arma::mat iMatrixDiagNegBinomCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::mat& uSample, const arma::vec& kKi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_iMatrixDiagNegBinomCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP uSampleSEXP, SEXP kKiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uSample(uSampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(iMatrixDiagNegBinomCpp_n(beta, sigma, alpha, uSample, kKi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// iMatrixDiagNegBinomCpp_t
arma::mat iMatrixDiagNegBinomCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& sigmaType, const arma::mat& uSample, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_iMatrixDiagNegBinomCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP sigmaTypeSEXP, SEXP uSampleSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uSample(uSampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(iMatrixDiagNegBinomCpp_t(beta, sigma, alpha, sigmaType, uSample, df, kKi, kLh, kLhi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// iMatrixDiagPoissonCpp_n
arma::mat iMatrixDiagPoissonCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::mat& uSample, const arma::vec& kKi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_iMatrixDiagPoissonCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSampleSEXP, SEXP kKiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uSample(uSampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(iMatrixDiagPoissonCpp_n(beta, sigma, uSample, kKi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// iMatrixDiagPoissonCpp_t
arma::mat iMatrixDiagPoissonCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& uSample, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_iMatrixDiagPoissonCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSampleSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uSample(uSampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(iMatrixDiagPoissonCpp_t(beta, sigma, sigmaType, uSample, df, kKi, kLh, kLhi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// iMatrixDiagCpp_t
arma::mat iMatrixDiagCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& uSample, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_iMatrixDiagCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSampleSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uSample(uSampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(iMatrixDiagCpp_t(beta, sigma, sigmaType, uSample, df, kKi, kLh, kLhi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// loglikelihoodLogitGradientCpp_n
arma::vec loglikelihoodLogitGradientCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& kKi, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodLogitGradientCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodLogitGradientCpp_n(beta, sigma, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodLogitGradientCpp_t
arma::vec loglikelihoodLogitGradientCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodLogitGradientCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodLogitGradientCpp_t(beta, sigma, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodLogitHessianCpp_n
arma::mat loglikelihoodLogitHessianCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& kKi, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodLogitHessianCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodLogitHessianCpp_n(beta, sigma, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodLogitHessianCpp_t
arma::mat loglikelihoodLogitHessianCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodLogitHessianCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodLogitHessianCpp_t(beta, sigma, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodLogitCpp_n
double loglikelihoodLogitCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodLogitCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodLogitCpp_n(beta, sigma, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodLogitCpp_t
double loglikelihoodLogitCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodLogitCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodLogitCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodNegBinomGradientCpp_n
arma::vec loglikelihoodNegBinomGradientCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& kKi, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodNegBinomGradientCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodNegBinomGradientCpp_n(beta, sigma, alpha, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodNegBinomGradientCpp_t
arma::vec loglikelihoodNegBinomGradientCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodNegBinomGradientCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodNegBinomGradientCpp_t(beta, sigma, alpha, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodNegBinomHessianCpp_n
arma::mat loglikelihoodNegBinomHessianCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& kKi, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodNegBinomHessianCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodNegBinomHessianCpp_n(beta, sigma, alpha, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodNegBinomHessianCpp_t
arma::mat loglikelihoodNegBinomHessianCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodNegBinomHessianCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodNegBinomHessianCpp_t(beta, sigma, alpha, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodNegBinomCpp_n
double loglikelihoodNegBinomCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodNegBinomCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodNegBinomCpp_n(beta, sigma, alpha, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodNegBinomCpp_t
double loglikelihoodNegBinomCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& sigmaType, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodNegBinomCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodNegBinomCpp_t(beta, sigma, alpha, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodPoissonGradientCpp_n
arma::vec loglikelihoodPoissonGradientCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& kKi, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodPoissonGradientCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodPoissonGradientCpp_n(beta, sigma, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodPoissonGradientCpp_t
arma::vec loglikelihoodPoissonGradientCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodPoissonGradientCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodPoissonGradientCpp_t(beta, sigma, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodPoissonHessianCpp_n
arma::mat loglikelihoodPoissonHessianCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& kKi, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodPoissonHessianCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodPoissonHessianCpp_n(beta, sigma, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodPoissonHessianCpp_t
arma::mat loglikelihoodPoissonHessianCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodPoissonHessianCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodPoissonHessianCpp_t(beta, sigma, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodPoissonCpp_n
double loglikelihoodPoissonCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodPoissonCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodPoissonCpp_n(beta, sigma, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// loglikelihoodPoissonCpp_t
double loglikelihoodPoissonCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_loglikelihoodPoissonCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(loglikelihoodPoissonCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// min0
double min0(double a, double b);
RcppExport SEXP mcemGLM_min0(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    __result = Rcpp::wrap(min0(a, b));
    return __result;
END_RCPP
}
// ldmn
/** Evaluate the log density of a multivariate normal distribution with mean vector 0 */ double ldmn(const arma::vec& x, const arma::mat& sigma);
RcppExport SEXP mcemGLM_ldmn(SEXP xSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(ldmn(x, sigma));
    return __result;
END_RCPP
}
// ldmt
/** Evaluate the log density of a multivariate t distribution with mean vector 0*/ double ldmt(arma::vec x, double df, arma::mat sigma, int sigmaType);
RcppExport SEXP mcemGLM_ldmt(SEXP xSEXP, SEXP dfSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type sigmaType(sigmaTypeSEXP);
    __result = Rcpp::wrap(ldmt(x, df, sigma, sigmaType));
    return __result;
END_RCPP
}
// MCMCloglikelihoodLogitCpp_n
arma::vec MCMCloglikelihoodLogitCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_MCMCloglikelihoodLogitCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(MCMCloglikelihoodLogitCpp_n(beta, sigma, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// MCMCloglikelihoodLogitCpp_t
arma::vec MCMCloglikelihoodLogitCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_MCMCloglikelihoodLogitCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(MCMCloglikelihoodLogitCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// MCMCloglikelihoodNegBinomCpp_n
arma::vec MCMCloglikelihoodNegBinomCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_MCMCloglikelihoodNegBinomCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(MCMCloglikelihoodNegBinomCpp_n(beta, sigma, alpha, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// MCMCloglikelihoodNegBinomCpp_t
arma::vec MCMCloglikelihoodNegBinomCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_MCMCloglikelihoodNegBinomCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(MCMCloglikelihoodNegBinomCpp_t(beta, sigma, alpha, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// MCMCloglikelihoodPoissonCpp_n
arma::vec MCMCloglikelihoodPoissonCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_MCMCloglikelihoodPoissonCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(MCMCloglikelihoodPoissonCpp_n(beta, sigma, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// MCMCloglikelihoodPoissonCpp_t
arma::vec MCMCloglikelihoodPoissonCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_MCMCloglikelihoodPoissonCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(MCMCloglikelihoodPoissonCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionCpp_t
double qFunctionCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionDiagCpp_n
List qFunctionDiagCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& kKi, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionDiagCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionDiagCpp_n(beta, sigma, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionDiagNegBinomCpp_n
List qFunctionDiagNegBinomCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& kKi, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionDiagNegBinomCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionDiagNegBinomCpp_n(beta, sigma, alpha, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionDiagNegBinomCpp_t
List qFunctionDiagNegBinomCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionDiagNegBinomCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionDiagNegBinomCpp_t(beta, sigma, alpha, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionDiagPoissonCpp_n
List qFunctionDiagPoissonCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& kKi, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionDiagPoissonCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP kKiSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionDiagPoissonCpp_n(beta, sigma, kKi, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionDiagPoissonCpp_t
List qFunctionDiagPoissonCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionDiagPoissonCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionDiagPoissonCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionDiagCpp_t
List qFunctionDiagCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionDiagCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionDiagCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ));
    return __result;
END_RCPP
}
// qFunctionCpp_n
double qFunctionCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::mat& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ);
RcppExport SEXP mcemGLM_qFunctionCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    __result = Rcpp::wrap(qFunctionCpp_n(beta, sigma, sigmaType, u, kY, kX, kZ));
    return __result;
END_RCPP
}
// uSamplerCpp
arma::mat uSamplerCpp(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_uSamplerCpp(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(uSamplerCpp(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// uSamplerCpp_n
arma::mat uSamplerCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_uSamplerCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(uSamplerCpp_n(beta, sigma, u, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// uSamplerNegBinomCpp_n
arma::mat uSamplerNegBinomCpp_n(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_uSamplerNegBinomCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(uSamplerNegBinomCpp_n(beta, sigma, alpha, u, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// uSamplerNegBinomCpp_t
arma::mat uSamplerNegBinomCpp_t(const arma::vec& beta, const arma::mat& sigma, double alpha, const arma::vec& sigmaType, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_uSamplerNegBinomCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(uSamplerNegBinomCpp_t(beta, sigma, alpha, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// uSamplerPoissonCpp_n
arma::mat uSamplerPoissonCpp_n(const arma::vec& beta, const arma::mat& sigma, const arma::vec& u, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_uSamplerPoissonCpp_n(SEXP betaSEXP, SEXP sigmaSEXP, SEXP uSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(uSamplerPoissonCpp_n(beta, sigma, u, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
// uSamplerPoissonCpp_t
arma::mat uSamplerPoissonCpp_t(const arma::vec& beta, const arma::mat& sigma, const arma::vec& sigmaType, const arma::vec& u, const arma::vec& df, const arma::vec& kKi, const arma::vec& kLh, const arma::vec& kLhi, const arma::vec& kY, const arma::mat& kX, const arma::mat& kZ, int B, double sd0);
RcppExport SEXP mcemGLM_uSamplerPoissonCpp_t(SEXP betaSEXP, SEXP sigmaSEXP, SEXP sigmaTypeSEXP, SEXP uSEXP, SEXP dfSEXP, SEXP kKiSEXP, SEXP kLhSEXP, SEXP kLhiSEXP, SEXP kYSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sd0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaType(sigmaTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kKi(kKiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLh(kLhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kLhi(kLhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kY(kYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kX(kXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kZ(kZSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sd0(sd0SEXP);
    __result = Rcpp::wrap(uSamplerPoissonCpp_t(beta, sigma, sigmaType, u, df, kKi, kLh, kLhi, kY, kX, kZ, B, sd0));
    return __result;
END_RCPP
}
